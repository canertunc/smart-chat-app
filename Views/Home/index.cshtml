@using RagBasedChatbot.Models
@using System.Text.Json
@using RagBasedChatbot.Helpers;

<div>
    <section>
        <div class="container py-5">
            <div class="row d-flex justify-content-center">
                <div class="col-md-10 col-lg-8 col-xl-6">
                    <div style="caret-color: transparent;" id=" chat2">
                        <div class="card-header d-flex justify-content-between align-items-center p-3">
                        </div>
                        <div id="chatBody" class="card-body"
                            style="position: relative; height: 450px; overflow-y: auto; overflow-x: hidden;">

                            @if (ViewBag.ChatMessages != null)
                            {
                                var chatList = (List<RagBasedChatbot.Models.ChatMessage>)ViewBag.ChatMessages;
                                foreach (var cm in chatList)
                                {
                                    <!-- user message -->
                                    <div class="d-flex flex-row justify-content-start mb-4">
                                        <div>
                                            <p class="small p-2 ms-3 mb-1 rounded-3 bg-body-tertiary">
                                                @Html.Raw(System.Net.WebUtility.HtmlEncode(cm.QuestionMessage))
                                            </p>
                                            <p class="small ms-3 mb-3 rounded-3 text-muted">
                                                @cm.Timestamp.ToLocalTime().ToString("g")
                                            </p>
                                        </div>
                                    </div>

                                    <!-- bot message -->
                                    <div class="d-flex flex-row justify-content-end mb-4 pt-1">
                                        <div>
                                            <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">
                                                @Html.Raw(System.Net.WebUtility.HtmlEncode(cm.AnswerMessage))
                                            </p>
                                            <p class="small me-3 mb-3 rounded-3 text-muted d-flex justify-content-end">
                                                @cm.Timestamp.ToLocalTime().ToString("g")
                                            </p>
                                        </div>
                                        <i class="fa-solid fa-sun fa-xl" style="width: 45px; height: 100%;color: #fffdb8;"></i>
                                    </div>
                                }
                            }
                        </div>

                        <div class="card-footer text-muted d-flex justify-content-start align-items-center p-3 "
                            style="position: relative">

                            <div class="d-flex align-items-center">
                                <input style="caret-color: auto;" type="text" name="userMessage" id="userInput"
                                    class="form-control custom-input" placeholder="Type message" required>

                                <button id="sendButton" value="userMessage" type="button" class="ms-3 btn btn-link p-0">
                                    <i class="fa-solid fa-paper-plane" style="color: #f0ff80;"></i>
                                </button>

                                <button id="micButton" type="button" class="ms-2 btn btn-link p-0" title="Konuş">
                                    <i id="micIcon" class="fa-solid fa-microphone" style="color:#f0ff80;"></i>
                                </button>
                            </div>

                            <div class="btn-group dropend">
                                <button type="button" class="btn dropdown-toggle p-0"
                                    style="background: none; border: none; box-shadow: none;" data-bs-toggle="dropdown"
                                    aria-expanded="false">
                                    <i class="fa-solid fa-comment"
                                        style="margin-left:5px; color: #f0ff80; font-size: 1rem;"></i>
                                </button>
                                <ul class="dropdown-menu p-3"
                                    style="background-color: rgba(0,0,0,0.1); border: none; min-width: 100px;">
                                    <li>
                                        <input type="text" name="user_id" id="gnnUserId" placeholder="User ID"
                                            style="font-size:12px;height:20px ;width: 100%; margin-bottom: 5px; padding: 5px; border-radius: 5px; border: 1px solid #ccc;">
                                    </li>
                                    <li>
                                        <input type="text" name="k" id="gnnK" placeholder="Top K"
                                            style="font-size:12px;height:20px ;width: 100%; padding: 5px; border-radius: 5px; border: 1px solid #ccc;">
                                    </li>
                                    <li>
                                        <button id="gnnButton" class="btn btn-success mt-2 mr-1"
                                            style="width: 80px;font-size:10px">Recommend</button>
                                    </li>
                                </ul>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

@section Styles {
    <link rel="stylesheet" href="/css/chat.css" />
}

@section Scripts {
    <script type="module">
        import { speakSequential, stopCurrent } from "/js/tts.js?v=3"; 
        /* =======================
           TTS Yardımcıları (Batch)
           ======================= */

        const TTS_LANGUAGE = "en";

        // Metni TTS'ye gitmeden sadeleştirilir
        function sanitizeForTts(s) {
            return String(s || "")
                .replace(/[_*`#~>-]+/g, " ")   // markdown işaretleri 
                .replace(/["“”]+/g, "")
                .replace(/\[(.*?)\]\((.*?)\)/g, "$1")  // [title](url) → title
                .replace(/https?:\/\/\S+/g, "")        // URL'leri at
                .replace(/[^\P{C}\n\r\t]+/gu, " ")     // kontrol karakterleri
                .replace(/\s+/g, " ")                  // fazla boşluk
                .trim();
        }

        // 300 kelimeyi geçince ilk noktalama işaretine (., !, ?, …) kadar uzatılır
        function chunkForTtsHard(full, maxChars = 520, wordCap = 300) {
            const text = sanitizeForTts(full);
            if (!text) return [];

            const out = [];
            let rest = text.trim();

            while (rest.length) {
                const words = rest.split(/\s+/);
                if (words.length <= wordCap) { out.push(rest); break; }

                let candidate = words.slice(0, wordCap).join(" ");
                let tail = rest.slice(candidate.length);

                // Candidate'ten SONRA ilk noktalama (çok uzaksa zorlamayalım)
                const punctMatch = tail.match(/^[^.!?…]*[.!?…]/);
                if (punctMatch && punctMatch[0].length <= 200) {
                    candidate += tail.slice(0, punctMatch[0].length);
                } else {
                    if (candidate.length > maxChars) {
                        const slice = candidate.slice(0, maxChars);
                        const cutAt = Math.max(slice.lastIndexOf(" "), 120);
                        candidate = slice.slice(0, cutAt).trim();
                    }
                }

                candidate = candidate.trim();
                if (!candidate) break;
                out.push(candidate);
                rest = rest.slice(candidate.length).trim();
            }

            const normalized = [];
            for (const ch of out) {
                if (ch.length <= maxChars) { normalized.push(ch); continue; }
                let s = ch;
                while (s.length > maxChars) {
                    const slice = s.slice(0, maxChars);
                    let cutAt = slice.lastIndexOf(" ");
                    if (cutAt < 120) cutAt = maxChars; // uzun kelimeyse düz kes
                    normalized.push(slice.slice(0, cutAt).trim());
                    s = s.slice(cutAt).trim();
                }
                if (s) normalized.push(s);
            }
            return normalized;
        }


        // Basit oynatma kuyruğu
        let __ttsQueue = [];
        let __ttsPlaying = false;

        async function __playQueue() {
            if (__ttsPlaying) return;
            __ttsPlaying = true;
            try {
                while (__ttsQueue.length > 0) {
                    const url = __ttsQueue.shift();
                    await new Promise(res => {
                        const a = new Audio(url);
                        a.onended = res; a.onerror = res;
                        a.play().catch(res);
                    });
                }
            } finally { __ttsPlaying = false; }
        }

        async function speakChunksSequentially(chunks, opts = { language: TTS_LANGUAGE }) {
            for (const ch of chunks) {
                try {
                    const { speak } = await import("/js/tts.js");
                    const url = await speak(ch, opts);
                    if (url) { __ttsQueue.push(url); __playQueue(); }
                } catch (e) {
                    console.warn("[TTS] chunk skipped:", e?.message || e);
                }
            }
        }

        /* ================
           UI yardımcıları
           ================ */

        function escapeHtml(unsafe) {
            if (!unsafe) return "";
            return unsafe.replace(/&/g, "&amp;")
                .replace(/</g, "&lt;").replace(/>/g, "&gt;")
                .replace(/\"/g, "&quot;").replace(/'/g, "&#039;");
        }

        function addUserMessage(text) {
            const chatBody = document.getElementById("chatBody");
            const wrapper = document.createElement("div");
            wrapper.className = "d-flex flex-row justify-content-start mb-4";
            wrapper.innerHTML = `
                                                                <div>
                                                                  <p class="small p-2 ms-3 mb-1 rounded-3 bg-body-tertiary">${escapeHtml(text)}</p>
                                                                  <p class="small ms-3 mb-3 rounded-3 text-muted">${new Date().toLocaleTimeString()}</p>
                                                                </div>`;
            chatBody.appendChild(wrapper);
            chatBody.scrollTop = chatBody.scrollHeight;
        }

        function createBotBubble() {
            const chatBody = document.getElementById("chatBody");
            const wrapper = document.createElement("div");
            wrapper.className = "d-flex flex-row justify-content-end mb-4 pt-1";
            wrapper.innerHTML = `
                                                                <div>
                                                                  <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary"></p>
                                                                  <p class="small me-3 mb-3 rounded-3 text-muted d-flex justify-content-end">${new Date().toLocaleTimeString()}</p>
                                                                </div>
                                                                <i class="fa-solid fa-sun fa-xl" style="width:45px;height:100%;color:#fffdb8;"></i>`;
            chatBody.appendChild(wrapper);
            chatBody.scrollTop = chatBody.scrollHeight;
            return wrapper.querySelector("p");
        }

        function appendToBotBubble(text) {
            if (!currentBotTextEl) return;
            currentBotTextEl.textContent += text;
            const chatBody = document.getElementById("chatBody");
            chatBody.scrollTop = chatBody.scrollHeight;
        }

        /* ================
           SignalR - LLM
           ================ */

        let currentPrompt = "";
        let currentBotTextEl = null;
        let lastAnswer = "";

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/llmHub")
            .build();

        // Stream sırasında TTS kapalı
        const ENABLE_STREAM_TTS = false;

        connection.on("token", function (message) {
            try {
                if (typeof message === "string" && message.startsWith("data: "))
                    message = message.slice(6).trim();
                if (typeof message === "string" && message.trim() === "[DONE]") return;

                const parsed = (typeof message === "string") ? JSON.parse(message) : message;
                const text = parsed?.choices?.[0]?.text ?? "";
                if (!text) return;

                lastAnswer += text;
                appendToBotBubble(text);

                if (ENABLE_STREAM_TTS) {
                    // pushTokenForTts(text);
                }
            } catch (e) {
                console.error("JSON parse hatası (token):", e, message);
            }
        });

        connection.on("completed", async function (finalOrStatus) {
            try {
                // ekranda görülen bot balonundaki metin alınır
                const bubbleText = (currentBotTextEl?.textContent || "").trim();

                // hub’dan gelen son metin
                const hubText =
                    (typeof finalOrStatus === "string" && finalOrStatus !== "canceled" && finalOrStatus.trim())
                        ? finalOrStatus
                        : (lastAnswer || "");

                // öncelik balon, boşsa hub
                const toSpeak = bubbleText || hubText;
                console.log("[TTS] final text len =", (toSpeak || "").length);
                if (!toSpeak) return;

                stopCurrent();

                await speakSequential(toSpeak, { language: TTS_LANGUAGE });
            } catch (e) {
                console.error("[TTS] completed handler error:", e);
            } finally {
                currentPrompt = "";
                currentBotTextEl = null;
                lastAnswer = "";
            }
        });

        connection.on("error", function (err) {
            console.error("Hub error:", err);
        });

        connection.start().then(() => {
            console.log("SignalR bağlandı");

            function sendMessage() {
                const input = document.getElementById("userInput");
                const prompt = (input.value || "").trim();
                if (!prompt) return;

                addUserMessage(prompt);
                currentBotTextEl = createBotBubble();

                currentPrompt = prompt;
                lastAnswer = "";

                connection.invoke("Generate", prompt, true);
                input.value = "";
            }

            document.getElementById("sendButton").addEventListener("click", sendMessage);
            document.getElementById("userInput").addEventListener("keydown", (e) => {
                if (e.key === "Enter") { e.preventDefault(); sendMessage(); }
            });
        }).catch(err => console.error(err.toString()));

        /* ================
           SignalR - GNN
           ================ */

        const gnnConnection = new signalR.HubConnectionBuilder()
            .withUrl("/gnnHub")
            .build();

        gnnConnection.on("token", function (message) {
            try {
                const recommendations = JSON.parse(message);
                recommendations.forEach(rec => {
                    const itemId = rec.item_id;
                    const score = (rec.score ?? 0).toFixed(2);
                    appendToBotBubble(`Item ID: ${itemId}, Score: ${score}`);
                });
            } catch (e) {
                console.error("JSON parse hatası (token):", e, message);
            }
        });

        gnnConnection.on("completed", function () {
            console.log("GNN stream tamamlandı");
        });

        gnnConnection.on("error", function (err) {
            console.error("GNN hub error:", err);
        });

        gnnConnection.start().then(() => {
            console.log("GNN SignalR bağlandı");

            function sendGnn() {
                const userIdInput = parseInt((document.getElementById("gnnUserId").value || "").trim(), 10);
                const kInput = parseInt((document.getElementById("gnnK").value || "").trim(), 10);
                if (!userIdInput || !kInput) { alert("User ID ve Top K boş olamaz!"); return; }

                const prompt = `Recommend ${kInput} products for the user with ID ${userIdInput}.`;
                addUserMessage(prompt);
                currentBotTextEl = createBotBubble();

                currentPrompt = prompt;
                lastAnswer = "";

                gnnConnection.invoke("Recommend", userIdInput, kInput);
            }

            document.getElementById("gnnButton").addEventListener("click", sendGnn);
        }).catch(err => console.error(err.toString()));

        /* ================
           Mic UI Toggle (Sadece görsel)
           ================ */
        (function () {
            const micBtn = document.getElementById("micButton");
            const micIcon = document.getElementById("micIcon");
            let isRecording = false;

            function setMicState(rec) {
                isRecording = rec;
                if (rec) {
                    micIcon.classList.remove("fa-microphone");
                    micIcon.classList.add("fa-stop");
                    micIcon.style.filter = "drop-shadow(0 0 4px #ff6b6b)";
                } else {
                    micIcon.classList.remove("fa-stop");
                    micIcon.classList.add("fa-microphone");
                    micIcon.style.filter = "";
                }
            }

            micBtn.addEventListener("click", () => {
                setMicState(!isRecording);
                console.log(isRecording ? "Mic: REC" : "Mic: STOP");
            });
        })();
    </script>

    <script src="/js/voice.js"></script>
}