@using RagBasedChatbot.Models
@using System.Text.Json
@using RagBasedChatbot.Helpers;

<div>
    <section>
        <div class="container py-5">
            <div class="row d-flex justify-content-center">
                <div class="col-md-10 col-lg-8 col-xl-6">
                    <div style="caret-color: transparent;" id=" chat2">
                        <div class="card-header d-flex justify-content-between align-items-center p-3">
                        </div>
                        <div id="chatBody" class="card-body"
                            style="position: relative; height: 450px; overflow-y: auto; overflow-x: hidden;">

                            @if (ViewBag.ChatMessages != null)
                            {
                                var chatList = (List<RagBasedChatbot.Models.ChatMessage>)ViewBag.ChatMessages;
                                foreach (var cm in chatList)
                                {
                                    <!-- user message -->
                                    <div class="d-flex flex-row justify-content-start mb-4">
                                        <div>
                                            <p class="small p-2 ms-3 mb-1 rounded-3 bg-body-tertiary">
                                                @Html.Raw(System.Net.WebUtility.HtmlEncode(cm.QuestionMessage))
                                            </p>
                                            <p class="small ms-3 mb-3 rounded-3 text-muted">
                                                @cm.Timestamp.ToLocalTime().ToString("g")
                                            </p>
                                        </div>
                                    </div>

                                    <!-- bot message -->
                                    <div class="d-flex flex-row justify-content-end mb-4 pt-1">
                                        <div>
                                            <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary">
                                                @Html.Raw(System.Net.WebUtility.HtmlEncode(cm.AnswerMessage))
                                            </p>
                                            <p class="small me-3 mb-3 rounded-3 text-muted d-flex justify-content-end">
                                                @cm.Timestamp.ToLocalTime().ToString("g")
                                            </p>
                                        </div>
                                        <i class="fa-solid fa-sun fa-xl" style="width: 45px; height: 100%;color: #fffdb8;"></i>
                                    </div>
                                }
                            }
                        </div>

                        <div class="card-footer text-muted d-flex justify-content-start align-items-center p-3 "
                            style="position: relative">

                            <div class="d-flex align-items-center">
                                <input style="caret-color: auto;" type="text" name="userMessage" id="userInput"
                                    class="form-control custom-input" placeholder="Type message" required>

                                <button id="sendButton" value="userMessage" type="button" class="ms-3 btn btn-link p-0">
                                    <i class="fa-solid fa-paper-plane" style="color: #f0ff80;"></i>
                                </button>
                            </div>

                            <div class="btn-group dropend">
                                <button type="button" class="btn dropdown-toggle p-0"
                                    style="background: none; border: none; box-shadow: none;" data-bs-toggle="dropdown"
                                    aria-expanded="false">
                                    <i class="fa-solid fa-comment"
                                        style="margin-left:5px; color: #f0ff80; font-size: 1rem;"></i>
                                </button>
                                <ul class="dropdown-menu p-3"
                                    style="background-color: rgba(0,0,0,0.1); border: none; min-width: 100px;">
                                    <li>
                                        <input type="text" name="user_id" id="gnnUserId" placeholder="User ID"
                                            style="font-size:12px;height:20px ;width: 100%; margin-bottom: 5px; padding: 5px; border-radius: 5px; border: 1px solid #ccc;">
                                    </li>
                                    <li>
                                        <input type="text" name="k" id="gnnK" placeholder="Top K"
                                            style="font-size:12px;height:20px ;width: 100%; padding: 5px; border-radius: 5px; border: 1px solid #ccc;">
                                    </li>
                                    <li>
                                        <button id="gnnButton" class="btn btn-success mt-2 mr-1"
                                            style="width: 80px;font-size:10px">Recommend</button>
                                    </li>
                                </ul>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>

@section Styles {
    <link rel="stylesheet" href="/css/chat.css" />
}

@section Scripts {

    <script>

        function escapeHtml(unsafe) {
            if (!unsafe) return "";
            return unsafe.replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/\"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        function addUserMessage(text) {
            const chatBody = document.getElementById("chatBody");
            const wrapper = document.createElement("div");
            wrapper.className = "d-flex flex-row justify-content-start mb-4";
            wrapper.innerHTML = `
                                    <div>
                                        <p class="small p-2 ms-3 mb-1 rounded-3 bg-body-tertiary">${escapeHtml(text)}</p>
                                        <p class="small ms-3 mb-3 rounded-3 text-muted">${new Date().toLocaleTimeString()}</p>
                                    </div>
                                `;
            chatBody.appendChild(wrapper);
            chatBody.scrollTop = chatBody.scrollHeight;
        }

        function createBotBubble() {
            const chatBody = document.getElementById("chatBody");
            const wrapper = document.createElement("div");
            wrapper.className = "d-flex flex-row justify-content-end mb-4 pt-1";
            wrapper.innerHTML = `
                                    <div>
                                        <p class="small p-2 me-3 mb-1 text-white rounded-3 bg-primary"></p>
                                        <p class="small me-3 mb-3 rounded-3 text-muted d-flex justify-content-end">${new Date().toLocaleTimeString()}</p>
                                    </div>
                                    <i class="fa-solid fa-sun fa-xl" style="width: 45px; height: 100%;color: #fffdb8;"></i>
                                `;
            chatBody.appendChild(wrapper);
            chatBody.scrollTop = chatBody.scrollHeight;
            // the first <p> inside wrapper is the bot text
            return wrapper.querySelector("p");
        }

        function appendToBotBubble(text) {
            if (!currentBotTextEl) return;
            // use textContent to avoid injecting HTML
            currentBotTextEl.textContent += text;
            const chatBody = document.getElementById("chatBody");
            chatBody.scrollTop = chatBody.scrollHeight;
        }

        // SignalR 
        let currentPrompt = "";
        let currentBotTextEl = null;
        let lastAnswer = "";

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("http://localhost:5058/llmHub")
            .build();

        connection.on("token", function (message) {
            try {
                if (typeof message === 'string' && message.startsWith("data: ")) message = message.slice(6);
                const parsed = JSON.parse(message);
                const text = parsed.choices?.[0]?.text ?? "";
                lastAnswer += text;
                appendToBotBubble(text);
            } catch (e) {
                console.error("JSON parse hatası (token):", e, message);
            }
        });

        connection.on("completed", function (status) {
            console.log("Stream tamamlandı", status || "");
            // send to server to persist in session
            try {
                fetch("/home/saveMessage", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ QuestionMessage: currentPrompt, AnswerMessage: lastAnswer })
                }).then(r => {
                    if (!r.ok) console.error("saveMessage başarısız:", r.status);
                }).catch(err => console.error("saveMessage fetch hatası:", err));
            } catch (e) {
                console.error(e);
            }

            // reset state
            currentPrompt = "";
            currentBotTextEl = null;
            lastAnswer = "";
        });

        connection.on("error", function (err) {
            console.error("Hub error:", err);
        });

        connection.start().then(() => {
            console.log("SignalR bağlandı");

            function sendMessage() {
                const input = document.getElementById("userInput");
                const prompt = (input.value || "").trim();
                if (!prompt) return;

                // add user message (left)
                addUserMessage(prompt);

                // create bot placeholder (right) where stream will be appended
                currentBotTextEl = createBotBubble();

                // set state for completed handler
                currentPrompt = prompt;
                lastAnswer = "";

                // invoke hub method
                connection.invoke("Generate", prompt, true);

                // clear input
                input.value = "";
            }

            document.getElementById("sendButton").addEventListener("click", sendMessage);
            document.getElementById("userInput").addEventListener("keydown", (e) => {
                if (e.key === "Enter") {
                    e.preventDefault();
                    sendMessage();
                }
            });

        }).catch(err => console.error(err.toString()));

        const gnnConnection = new signalR.HubConnectionBuilder()
            .withUrl("http://localhost:5058/gnnHub")
            .build();

        gnnConnection.on("token", function (message) {
            try {
                // JSON parse et
                const recommendations = JSON.parse(message);

                // recommendations bir liste olduğu için tek tek işleyebiliriz
                recommendations.forEach(rec => {
                    const itemId = rec.item_id;
                    const score = rec.score.toFixed(2); // opsiyonel: 2 basamak
                    appendToBotBubble(`Item ID: ${itemId}, Score: ${score}`);
                });

            } catch (e) {
                console.error("JSON parse hatası (token):", e, message);
            }
        });

        gnnConnection.on("completed", function (status) {
            console.log("Stream tamamlandı", status || "");
            // send to server to persist in session
            try {
                fetch("/home/saveMessage", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ QuestionMessage: currentPrompt, AnswerMessage: lastAnswer })
                }).then(r => {
                    if (!r.ok) console.error("saveMessage başarısız:", r.status);
                }).catch(err => console.error("saveMessage fetch hatası:", err));
            } catch (e) {
                console.error(e);
            }

            // reset state
            currentPrompt = "";
            currentBotTextEl = null;
            lastAnswer = "";
        });

        gnnConnection.on("error", function (err) {
            console.error("Hub error:", err);
        });

        gnnConnection.start().then(() => {
            console.log("SignalR bağlandı");

            function sendMessage() {
                // Input elementlerini seç
                const userIdInput = parseInt((document.getElementById("gnnUserId").value || "").trim(), 10);
                const kInput = parseInt((document.getElementById("gnnK").value || "").trim(), 10);

                // Boş mu kontrol
                if (!userIdInput || !kInput) {
                    alert("User ID ve Top K boş olamaz!");
                    return;
                }
                const prompt = `Recommend ${kInput} products for the user with ID ${userIdInput}.`;
                // add user message (left)
                addUserMessage(prompt);

                // create bot placeholder (right) where stream will be appended
                currentBotTextEl = createBotBubble();

                // set state for completed handler
                currentPrompt = prompt;
                lastAnswer = "";

                // invoke hub method
                gnnConnection.invoke("Recommend", userIdInput, kInput);

            }

            document.getElementById("gnnButton").addEventListener("click", sendMessage);

        }).catch(err => console.error(err.toString()));




    </script>
    @* <script src="~/js/file.js"></script>
    <script src="~/js/chat.js"></script> *@
}
